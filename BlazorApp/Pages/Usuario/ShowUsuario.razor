@*@using Application.Dtos

@using BlazorApp.Services
@using Domain.Localization
@using Microsoft.Extensions.Localization
@using System.Net

@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> Localizer
@inject HttpClient Http
@inject HttpInterceptorService Interceptor

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@CardHeader</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @bind-IsValid="@success">
            <MudGrid>

                <MudItem xs="6" sm="4">
                    <MudTextField @bind-Value=@(item.Name) Disabled=@(disabled) Label="@Localizer[Resource.GatewayDtoName]" Margin="Margin.Normal" Placeholder="@($"{Localizer[Resource.GatewayDtoName]} ...")"
                                  Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]">
                    </MudTextField>
                </MudItem>

                <MudItem xs="6" sm="4">
                    <MudTextField @bind-Value=item.Ipv4Address Disabled=@(disabled) Label="@Localizer[Resource.GatewayDtoIpv4Address]" Margin="Margin.Normal" Placeholder="@($"{Localizer[Resource.GatewayDtoIpv4Address]} ...")"
                                  Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]"
                                  Validation="@(new Ipv4Address(){ErrorMessage=Localizer[Resource.validation_Ipv4AddressBadFormat]})">
                    </MudTextField>
                </MudItem>

            </MudGrid>
            <br />


            @if (ShowMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (AddMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="AddAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
            }
            @if (EditMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="EditAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (DeleteMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="DeleteAsync" Variant="Variant.Filled" Color="Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public GatewayDto item { get; set; } = new GatewayDto();

    [Parameter]
    public Action OnSuccessfullySaveAsync { get; set; } = () => { };

    [Parameter]
    public Action OnSuccessfullyDeletedAsync { get; set; }= () => { };

    [Parameter]
    public Action OnCancelled { get; set; } = () => { };

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public bool DeleteMode { get; set; }

    [Parameter]
    public bool ShowMode { get; set; }

    [Parameter]
    public bool AddMode { get; set; }

    private bool success = false;

    private bool disabled => ShowMode || DeleteMode;

    private string CardHeader = string.Empty;

    private void UpdateCardHeader()
    {
        if (EditMode)
            CardHeader = Localizer[Resource.display_AddEdit];
        else if (DeleteMode)
            CardHeader = Localizer[Resource.display_ConfirmOnDelete];
        else
            CardHeader = Localizer[Resource.btn_Details];
    }

    protected override void OnParametersSet()
    {
        var justOneFlag = ShowMode ^ DeleteMode ^ EditMode ^ AddMode;
        if (!justOneFlag)
            throw new ArgumentException(Localizer[Resource.Exception_MultipleModeOnShowView]);
    }
    public void Dispose() => Interceptor.DisposeEvent();
    protected override void OnInitialized()
    {
        Interceptor.RegisterEvent();
        UpdateCardHeader();
    }

    private void Cancel()
    {
        OnCancelled.Invoke();
    }

    private async Task DeleteAsync()
    {
        if (item == null || item.Id == Guid.Empty)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var itemToDelete = await Http.GetFromJsonAsync<GatewayDto>($"api/gateway/{item.Id}");

            if (itemToDelete == null)
            {
                Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            }
            else
            {
                var result = await Http.DeleteAsync($"api/gateway/{item.Id}");
                if (result.StatusCode == HttpStatusCode.NoContent)
                {
                    Snackbar.Add(Localizer[Resource.message_SuccesfullyDeleted], Severity.Success);
                    OnSuccessfullyDeletedAsync.Invoke();
                }
            }
        }
    }
    private async Task EditAsync()
    {
        var itemToEdit = await Http.GetFromJsonAsync<GatewayDto>($"api/gateway/{item.Id}");

        if (itemToEdit == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var result = await Http.PutAsJsonAsync<GatewayDto>($"api/gateway/{item.Id}", item);
            if (result.StatusCode == HttpStatusCode.NoContent)
            {
                Snackbar.Add(Localizer[Resource.message_SuccesfullyEdited], Severity.Success);
                OnSuccessfullySaveAsync.Invoke();
            }
        }
    }
    private async Task AddAsync()
    {
        var result = await Http.PostAsJsonAsync<GatewayDto>($"api/gateway", item);
        if (result.StatusCode == HttpStatusCode.Created || result.StatusCode == HttpStatusCode.OK)
        {
            Snackbar.Add(Localizer[Resource.message_SuccesfullyAdded], Severity.Success);
            OnSuccessfullySaveAsync.Invoke();
        }
        var response = result.Content.ReadAsStringAsync();
    }


    private void ChangeToEditMode()
    {
        EditMode = true;
        DeleteMode = false;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToDeleteMode()
    {
        EditMode = false;
        DeleteMode = true;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToShowMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = true;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToAddMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = false;
        AddMode = true;
        UpdateCardHeader();
    }
}
*@